/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'com.gradle.build-scan' version '2.1'
    id 'maven-publish'
    id "com.github.spotbugs" version "1.6.10"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "de.undercouch.download" version "4.0.4"
    id "net.researchgate.release" version "2.6.0"
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: "com.github.spotbugs"
apply plugin: 'jacoco'

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.testngVersion = project.testngVersion
ext.slf4jVersion = project.slf4jVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion

ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion

allprojects {
    group = 'org.ballerinalang'
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/snapshots/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-grpc'
        }
        //stdlib module dependencies
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-io'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-runtime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-time'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-stringutils'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-log'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-system'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-config'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-http'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-mime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-task'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/ballerina-lang'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
}

subprojects {
    apply plugin: 'java'

    configurations {
        ballerinaStdLibs
    }
    dependencies {
        /* Standard libraries */
        ballerinaStdLibs "org.ballerinalang:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "org.ballerinalang:runtime-ballerina:${stdlibRuntimeVersion}"
        ballerinaStdLibs "org.ballerinalang:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "org.ballerinalang:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "org.ballerinalang:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "org.ballerinalang:system-ballerina:${stdlibSystemVersion}"
        ballerinaStdLibs "org.ballerinalang:config-ballerina:${stdlibConfigVersion}"
        ballerinaStdLibs "org.ballerinalang:mime-ballerina:${stdlibMimeVersion}"

        implementation 'org.slf4j:slf4j-simple:1.7.26'
        implementation 'org.slf4j:slf4j-jdk14:1.7.26'
        implementation 'org.testng:testng:6.14.3'
        implementation 'info.picocli:picocli:4.0.1'
        implementation 'io.swagger.core.v3:swagger-models:1.5.18'
        implementation 'io.swagger.parser.v3:swagger-parser:2.0.14'
        implementation 'io.swagger.parser.v3:swagger-parser-v2-converter:2.0.14'
        implementation 'javax.transaction:javax.transaction-api:1.3'
        implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
        implementation 'junit:junit:4.8.2'


    }


    release {
        // Disable check snapshots temporarily
        buildTasks = []
        failOnSnapshotDependencies = false
        failOnCommitNeeded = false
        versionPropertyFile = 'gradle.properties'
        tagTemplate = 'v${version}'
        git {
            // To release from any branch
            requireBranch = null
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
checkstyle {
    toolVersion '7.8.2'
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
}
spotbugsMain {
    it.effort "max"
    it.reportLevel "low"
    it.reports {
        xml.enabled false
        html.enabled true
    }
    def excludeFile = file('spotbugs-exclude.xml')
    if(excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
}

spotbugsTest {
    it.enabled = false
}

test {
    testLogging {
        // Make sure output from standard out or error is shown in Gradle output.
        showStackTraces = true
        showStandardStreams = true
    }
    systemProperty "ballerina.home", "$buildDir"
    systemProperty "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog"
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task createJavadoc(type: Javadoc) {
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    failOnError true
    options.addStringOption('Xwerror', '-quiet')
}

check {
    dependsOn createJavadoc
}
//task wrapper(type: Wrapper) {
//    gradleVersion = '5.4'
//}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
        csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
    }

    onlyIf = {
        true
    }
}
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}
//checkstyle {
//    toolVersion '7.8.2'
//    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
//    configFile file("${rootDir}/config/checkstyle/ckeckstyle.xml")
//}
//buildPlugin.dependsOn check