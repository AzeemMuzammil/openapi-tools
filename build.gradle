/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id "base"
    id 'maven-publish'
    id "com.github.spotbugs" version "4.0.5"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "de.undercouch.download" version "4.0.4"
    id "net.researchgate.release" version "2.8.0"
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
}

apply plugin: 'java'
apply plugin: "com.github.spotbugs"
apply plugin: 'jacoco'
apply plugin: "org.javamodularity.moduleplugin"

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.testngVersion = project.testngVersion
ext.slf4jVersion = project.slf4jVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibRuntimeVersion = project.stdlibRuntimeVersion
ext.stdlibHttpVersion = project.stdlibHttpVersion
ext.puppycrawlCheckstyleVersion = "8.18"

allprojects {
    group = 'org.ballerinalang'
    version = project.version
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }
        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }
        //stdlib module dependencies
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-io'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-runtime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-time'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-crypto'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-auth'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-cache'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-regex'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-log'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-os'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-http'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-mime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-task'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-reflect'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/ballerina-lang'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-file'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    // Add checkstyles
    checkstyle {
        toolVersion '8.16'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    def excludePattern = '**/module-info.java'
    tasks.withType(Checkstyle) {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        exclude excludePattern
    }
}

subprojects {
    apply plugin: 'java'
    configurations {
        ballerinaStdLibs
    }
    dependencies {
        /* Standard libraries */
        ballerinaStdLibs "org.ballerinalang:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "org.ballerinalang:runtime-ballerina:${stdlibRuntimeVersion}"
        ballerinaStdLibs "org.ballerinalang:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "org.ballerinalang:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "org.ballerinalang:os-ballerina:${stdlibOsVersion}"
        ballerinaStdLibs "org.ballerinalang:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "org.ballerinalang:regex-ballerina:${stdlibRegexVersion}"
        ballerinaStdLibs "org.ballerinalang:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "org.ballerinalang:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "org.ballerinalang:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "org.ballerinalang:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "org.ballerinalang:task-ballerina:${stdlibTaskVersion}"
        ballerinaStdLibs "org.ballerinalang:file-ballerina:${stdlibFileVersion}"

    }
}

def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.substring(0, moduleVersion.indexOf('-'))
}

release {
    // Disable check snapshots temporarily
    failOnPublishNeeded = false
    buildTasks = ['buildProject']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task buildProject {
    dependsOn('module-ballerina-openapi:build')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//task codeCoverageReport(type: JacocoReport) {
//    dependsOn = subprojects.test
//
//    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")
//
//    subprojects.each {
//        sourceSets it.sourceSets.main
//    }
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        csv.enabled = true
//        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
//        html.destination = new File("${buildDir}/reports/jacoco/report.html")
//        csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
//    }
//
//    onlyIf = {
//        true
//    }
//}

task codeCoverageReport(type: JacocoReport) {
    dependsOn('openapi-validator:copyJavaClassFiles')
    dependsOn('openapi-cli:copyJavaClassFiles')
    dependsOn('module-ballerina-openapi:extractBallerinaClassFiles')

    executionData fileTree(project.rootDir.absolutePath).include("**/target/cache/tests_cache/coverage/ballerina.exec")
    additionalClassDirs files("${buildDir}/classes")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
    }

    onlyIf = {
        true
    }
}

